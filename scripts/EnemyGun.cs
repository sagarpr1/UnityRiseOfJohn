//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using System.Collections;

public class EnemyGun : MonoBehaviour
{

	private PlayerControl playerCtrl;		// Reference to the PlayerControl script.
	private Animator anim;					// Reference to the Animator component.

	public GameObject[] target;
	public Rigidbody2D bullet;
	public float bulletSpeed = 20f;
	public float range = 30f;
	public float distance;
	private float bulletTimer = 0f;
	public float shootInterval = 1f;
	public GameObject[] tran;

	void Awake()
	{
		// Setting up the references.
		//anim = transform.root.gameObject.GetComponent<Animator>();
		//playerCtrl = transform.root.GetComponent<PlayerControl>();
		//InvokeRepeating("LaunchProjectile", 1.0f, 0.4f);
		
	}
	

	void Update ()
	{
		// If the fire button is pressed...
		foreach (GameObject targ in target) {

			if (targ != null) {
			distance = Vector2.Distance (transform.position, targ.transform.position);
			if (distance < range) {
				Attack (targ);
			}
			}
		} 

		/*else {
			tran = GameObject.FindGameObjectsWithTag("Player");
			foreach (GameObject tran1 in tran)
			{
				// ... and if it's beyond the left spawn position...
				distance = Vector2.Distance (transform.position, tran1.gameObject.transform.position);
				if (distance < range) {
					Attack (tran1.gameObject.transform);
				}

			}
		}
		*/
	}

	public void Attack(GameObject t1) {

		bulletTimer += Time.deltaTime;
		if (bulletTimer > shootInterval) {
			Vector2 direction = t1.transform.position - transform.position;
			direction.Normalize ();

			Rigidbody2D bulletInstance = Instantiate (bullet, transform.position, transform.rotation) as Rigidbody2D;
			bulletInstance.velocity = direction * bulletSpeed;
			bulletTimer = 0;
		}
	}

	
}
